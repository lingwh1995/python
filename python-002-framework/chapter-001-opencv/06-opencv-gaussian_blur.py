import cv2
import image_util as image_util

"""
    高斯模糊
        高斯模糊的原理
            高斯模糊是基于高斯分布的滤波技术。它通过使用一个特定的高斯核与图像进行卷积来实现模糊效果。高斯核是一个以中心像素为中心对称的矩阵，矩阵
            中的每个元素是基于高斯函数计算得出的权重值。高斯核的大小和标准差可以控制模糊的程度，较大的核或标准差会使图像更加模糊。
        高斯模糊的特点
            平滑性：高斯模糊是一种平滑滤波器，可以消除图像中的噪声和细节。
            边缘模糊：高斯模糊的边缘保持能力相对较低，过于强烈的高斯模糊可能会使图像的边缘变得模糊。
            高斯核计算：高斯核的计算涉及到高斯分布，它是一种统计学上的概率分布，因此高斯模糊是一种有理论支持的滤波方法。
        高斯模糊在图像处理中的应用实例
            图像降噪：当图像包含高斯噪声时，使用适当的高斯核可以有效减少噪声。
            背景虚化：在摄影中，通过高斯模糊使得背景模糊，突出主体。
            预处理步骤：在进行图像特征检测之前，常使用高斯模糊来去除图像中的无关细节。
        高斯模糊效果分析
            从实际效果来看，高斯模糊通常会使得图像边缘变得较为柔和，细节部分会被模糊化。图像噪声部分会减少，但同时可能会丧失一些细节信息。例如，在
            使用较大核和标准差进行模糊时，可以明显观察到图像中的小细节被“抹去”，视觉上更加平滑。但是，如果参数选择不当，也可能会导致图像过度模糊，
            失去所需的细节。
        高斯模糊与其它模糊技术的比较
            高斯模糊与其它模糊技术（如均值模糊、中值模糊等）在实现原理上有所不同。均值模糊是通过计算邻域内像素值的平均来实现的，而中值模糊则是取邻
            域内像素值的中位数。高斯模糊的优势在于它通过高斯分布的权重来实现更自然的模糊效果，而均值模糊和中值模糊则简单且快速。在图像处理的特定应
            用场景中，选择合适的模糊技术可以达到更佳的效果。
        高斯模糊优化建议
            当使用高斯模糊时，可能需要对核的大小和标准差进行调整以获得最佳效果。对于大图像，可能需要使用更大的核来获得显著的模糊效果。同时，高斯模
            糊的计算成本相对较高，特别是使用较大核时。在处理大量图像或者需要实时处理的场景中，可以考虑使用优化技术，如对图像进行下采样后再进行模糊
            处理，以减少计算量。
        高斯模糊的进一步应用
            除了简单的图像模糊效果外，高斯模糊还可以与其他图像处理技术结合，实现更加复杂的图像处理任务。例如，在图像分割、特征提取等任务中，高斯模
            糊常常作为预处理步骤出现。通过调整高斯模糊的参数，可以获得不同的视觉效果，从而为创意工作提供支持，如艺术风格的转换或视觉效果的增强。 
"""


def opencv_gaussian_blur():
    """
        使用opencv进行高斯模糊

        cv2.GaussianBlur() 函数用于对图像进行高斯模糊。

        GaussianBlur(src, ksize, sigmaX[, dst[, sigmaY[, borderType]]])
        - src ：输入的图像。
        - ksize ：高斯核的大小。必须是正的奇数。
        - sigmaX ：高斯核在X方向上的标准差。
        - dst ：输出图像，与输入图像具有相同的尺寸和类型。
        - sigmaY ：高斯核在Y方向上的标准差。如果 sigmaY 为零，则设为 sigmaX 的值；如果都为零，则根据 ksize 计算得到。
        - borderType ：边界模式，定义了图像边界外像素的处理方式。
    """
    input_path = 'd://opencv//character_wheel.bmp'
    output_path = 'd://opencv//national_day_new.jpg'

    # 加载图像
    image = cv2.imread(input_path)
    # 设置高斯核的大小，必须是正奇数
    kernel_size = 3
    # 高斯分布的标准差，决定了模糊的程度。较大的 sigma 会产生更强的模糊效果
    sigma = 1.0

    # 对图像进行高斯模糊
    blurred_image = cv2.GaussianBlur(image, (kernel_size, kernel_size), sigma)

    # 保存模糊后的图像
    cv2.imwrite(output_path, blurred_image)

    # 显示图像
    image_util.show_image_in_window('高斯模糊后的图像', blurred_image)


if __name__ == "__main__":
    opencv_gaussian_blur()
